{"version":3,"sources":["../../src/schema/schema.js"],"names":["Schema","resolve","schema","data","type","Type","Error","validate","schemaType","validators","Object","keys","filter","key","reduce","out","concat","getPath","value","path","length","get","set"],"mappings":";;;;;;AACO,MAAMA,MAAM,GAAG;AACrBC,EAAAA,OAAO,CAAEC,MAAF,EAAUC,IAAV,EAAgB;AACtB,WAAOD,MAAP;AACA,GAHoB;;AAIrBE,EAAAA,IAAI,CAAEF,MAAF,EAAU;AACb,QAAI,CAACF,MAAM,CAACK,IAAP,CAAYH,MAAM,CAACE,IAAnB,CAAL,EAA+B;AAC9B,YAAM,IAAIE,KAAJ,CAAW,uBAAuBJ,MAAM,CAACE,IAAM,EAA/C,CAAN;AACA;;AACD,WAAOJ,MAAM,CAACK,IAAP,CAAYH,MAAM,CAACE,IAAnB,CAAP;AACA,GAToB;;AAUrBG,EAAAA,QAAQ,CAAEL,MAAF,EAAUC,IAAV,EAAgB;AACvBD,IAAAA,MAAM,GAAGF,MAAM,CAACC,OAAP,CAAeC,MAAf,EAAuBC,IAAvB,CAAT;AACA,UAAMK,UAAU,GAAGR,MAAM,CAACI,IAAP,CAAYF,MAAZ,CAAnB;AACA,UAAMO,UAAU,GAAGD,UAAU,CAACD,QAA9B;AACA,WAAOG,MAAM,CACXC,IADK,CACAF,UADA,EAELG,MAFK,CAEEC,GAAG,IAAKA,GAAG,IAAIX,MAFjB,EAGLY,MAHK,CAGE,CAACC,GAAD,EAAMF,GAAN,KAAcE,GAAG,CAACC,MAAJ,CAAWP,UAAU,CAACI,GAAD,CAAV,CAAgBX,MAAM,CAACW,GAAD,CAAtB,EAA6BV,IAA7B,CAAX,CAHhB,EAGgE,EAHhE,CAAP;AAIA,GAlBoB;;AAmBrBc,EAAAA,OAAO,EAAE,CAACf,MAAD,EAASgB,KAAT,EAAgBC,IAAhB,KAAyB;AACjCjB,IAAAA,MAAM,GAAGF,MAAM,CAACC,OAAP,CAAeC,MAAf,EAAuBgB,KAAvB,CAAT;;AACA,QAAIC,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACtB,aAAO;AAAElB,QAAAA,MAAF;AAAUgB,QAAAA;AAAV,OAAP;AACA;;AACD,WAAOlB,MAAM,CAACI,IAAP,CAAYF,MAAZ,EAAoBe,OAApB,CAA4Bf,MAA5B,EAAoCgB,KAApC,EAA2CC,IAA3C,CAAP;AACA,GAzBoB;AA0BrBE,EAAAA,GAAG,EAAE,CAACnB,MAAD,EAASC,IAAT,EAAegB,IAAf,KAAwB;AAC5BjB,IAAAA,MAAM,GAAGF,MAAM,CAACC,OAAP,CAAeC,MAAf,EAAuBC,IAAvB,CAAT;;AACA,QAAIgB,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACtB,aAAOjB,IAAP;AACA;;AACD,WAAOH,MAAM,CAACI,IAAP,CAAYF,MAAZ,EAAoBmB,GAApB,CAAwBnB,MAAxB,EAAgCC,IAAhC,EAAsCgB,IAAtC,CAAP;AACA,GAhCoB;AAiCrBG,EAAAA,GAAG,EAAE,CAACpB,MAAD,EAASC,IAAT,EAAegB,IAAf,EAAqBD,KAArB,KAA+B;AACnChB,IAAAA,MAAM,GAAGF,MAAM,CAACC,OAAP,CAAeC,MAAf,EAAuBC,IAAvB,CAAT;;AACA,QAAIgB,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACtB,aAAOF,KAAP;AACA;;AACD,WAAOlB,MAAM,CAACI,IAAP,CAAYF,MAAZ,EAAoBoB,GAApB,CAAwBpB,MAAxB,EAAgCC,IAAhC,EAAsCgB,IAAtC,EAA4CD,KAA5C,CAAP;AACA,GAvCoB;AAwCrBb,EAAAA,IAAI,EAAE;AAxCe,CAAf","sourcesContent":["\nexport const Schema = {\n\tresolve (schema, data) {\n\t\treturn schema;\n\t},\n\ttype (schema) {\n\t\tif (!Schema.Type[schema.type]) {\n\t\t\tthrow new Error(`unknown schema type ${ schema.type }`);\n\t\t}\n\t\treturn Schema.Type[schema.type];\n\t},\n\tvalidate (schema, data) {\n\t\tschema = Schema.resolve(schema, data);\n\t\tconst schemaType = Schema.type(schema);\n\t\tconst validators = schemaType.validate;\n\t\treturn Object\n\t\t\t.keys(validators)\n\t\t\t.filter(key => (key in schema))\n\t\t\t.reduce((out, key) => out.concat(validators[key](schema[key], data)), []);\n\t},\n\tgetPath: (schema, value, path) => {\n\t\tschema = Schema.resolve(schema, value);\n\t\tif (path.length === 0) {\n\t\t\treturn { schema, value };\n\t\t}\n\t\treturn Schema.type(schema).getPath(schema, value, path);\n\t},\n\tget: (schema, data, path) => {\n\t\tschema = Schema.resolve(schema, data);\n\t\tif (path.length === 0) {\n\t\t\treturn data;\n\t\t}\n\t\treturn Schema.type(schema).get(schema, data, path);\n\t},\n\tset: (schema, data, path, value) => {\n\t\tschema = Schema.resolve(schema, data);\n\t\tif (path.length === 0) {\n\t\t\treturn value;\n\t\t}\n\t\treturn Schema.type(schema).set(schema, data, path, value);\n\t},\n\tType: {}\n};\n\n"],"file":"schema.js"}